import requests
from datetime import datetime, timedelta

API_KEY = "–í–∞—à_API"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
CITY = "–ú–æ—Å–∫–≤–∞"  # –ò–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º
WEATHER_ICONS = {
    "01": ("‚òÄÔ∏è", "–Ø—Å–Ω–æ"),
    "02": ("‚õÖ", "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"),
    "03": ("‚òÅÔ∏è", "–û–±–ª–∞—á–Ω–æ"),
    "04": ("‚òÅÔ∏è", "–ü–∞—Å–º—É—Ä–Ω–æ"),
    "09": ("üåßÔ∏è", "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"),
    "10": ("üå¶Ô∏è", "–î–æ–∂–¥—å"),
    "11": ("‚õàÔ∏è", "–ì—Ä–æ–∑–∞"),
    "13": ("‚ùÑÔ∏è", "–°–Ω–µ–≥"),
    "50": ("üå´Ô∏è", "–¢—É–º–∞–Ω")
}

def get_weather_icon(weather_code: str) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É –ø–æ–≥–æ–¥—ã."""
    code_prefix = weather_code[:2]
    return WEATHER_ICONS.get(code_prefix, ("üå§Ô∏è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

def get_current_weather(api_key: str, city: str) -> dict:
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã."""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()
    if data.get("cod") != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")
    return data

def get_forecast(api_key: str, city: str) -> dict:
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()
    if data.get("cod") != "200":
        raise Exception(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")
    return data

def format_weather_message(current: dict, forecast: dict, city: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram."""
    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
    current_weather = current["weather"][0]
    icon, description = get_weather_icon(current_weather["icon"])
    temp = current["main"]["temp"]
    feels_like = current["main"]["feels_like"]
    
    msg = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>",
        f"‚Ä¢ <i>{description}</i>",
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)",
        f"‚Ä¢ –í–µ—Ç–µ—Ä: {current['wind']['speed']} –º/—Å",
        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['main']['humidity']}%",
        "\n<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>"
    ]

    # –ü—Ä–æ–≥–Ω–æ–∑
    daily_forecasts = {}
    for item in forecast["list"]:
        date = datetime.fromtimestamp(item["dt"]).strftime("%Y-%m-%d")
        if date not in daily_forecasts:
            daily_forecasts[date] = []
        daily_forecasts[date].append(item)

    for i, (date, items) in enumerate(daily_forecasts.items()):
        if i >= 3:
            break
        day_temp = max(f["main"]["temp"] for f in items)
        night_temp = min(f["main"]["temp"] for f in items if datetime.fromtimestamp(f["dt"]).hour < 6)
        weather = items[0]["weather"][0]
        icon, desc = get_weather_icon(weather["icon"])
        
        msg.append(
            f"\n{icon} <b>{datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')}</b>: "
            f"{desc}\n"
            f"‚Ä¢ –î–µ–Ω—å: <b>{day_temp}¬∞C</b>, –ù–æ—á—å: <b>{night_temp}¬∞C</b>"
        )

    return "\n".join(msg)

if __name__ == "__main__":
    try:
        current = get_current_weather(API_KEY, CITY)
        forecast = get_forecast(API_KEY, CITY)
        print(format_weather_message(current, forecast, CITY))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")