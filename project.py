import logging
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
)
import requests
from cachetools import TTLCache
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "–∞–ø–∏—à–∫–∞"
TELEGRAM_TOKEN = "—Ç–æ–∫–µ–Ω"
DEFAULT_CITY = "–ú–æ—Å–∫–≤–∞"
CACHE_TIME = 1800  # 30 –º–∏–Ω—É—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
NOTIFICATION_TIME = time(hour=7, minute=0, tzinfo=pytz.timezone("Europe/Moscow"))

# –ö–µ—à–∏
weather_cache = TTLCache(maxsize=100, ttl=CACHE_TIME)
forecast_cache = TTLCache(maxsize=50, ttl=3600)  # –ö–µ—à –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ 1 —á–∞—Å

WEATHER_ICONS = {
    "01": ("‚òÄÔ∏è", "–Ø—Å–Ω–æ"),
    "02": ("‚õÖ", "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"),
    "03": ("‚òÅÔ∏è", "–û–±–ª–∞—á–Ω–æ"),
    "04": ("‚òÅÔ∏è", "–ü–∞—Å–º—É—Ä–Ω–æ"),
    "09": ("üåßÔ∏è", "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"),
    "10": ("üå¶Ô∏è", "–î–æ–∂–¥—å"),
    "11": ("‚õàÔ∏è", "–ì—Ä–æ–∑–∞"),
    "13": ("‚ùÑÔ∏è", "–°–Ω–µ–≥"),
    "50": ("üå´Ô∏è", "–¢—É–º–∞–Ω"),
}

def get_weather_icon(weather_code: str) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É –ø–æ–≥–æ–¥—ã"""
    code_prefix = weather_code[:2]
    return WEATHER_ICONS.get(code_prefix, ("üå§Ô∏è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

def fetch_weather(city: str, is_forecast: bool = False) -> dict:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"{city}_forecast" if is_forecast else f"{city}_current"
    if cache_key in weather_cache:
        return weather_cache[cache_key]

    url = (
        f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric&lang=ru"
        if is_forecast
        else f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    )
    response = requests.get(url)
    data = response.json()

    if data.get("cod") not in [200, "200"]:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")

    weather_cache[cache_key] = data
    return data

def build_weather_message(current: dict, forecast: dict, city: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π"""
    current_weather = current["weather"][0]
    icon, description = get_weather_icon(current_weather["icon"])
    temp = current["main"]["temp"]
    feels_like = current["main"]["feels_like"]
    pop = forecast["list"][0].get("pop", 0) * 100

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞)
    timestamp = current.get('dt', datetime.now().timestamp())
    time_str = datetime.fromtimestamp(timestamp).strftime('%H:%M')

    msg = [
        f"‚è± <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_str}</i>",
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>",
        f"‚Ä¢ <i>{description}</i>",
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)",
        f"‚Ä¢ –í–µ—Ç–µ—Ä: {current['wind']['speed']} –º/—Å",
        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['main']['humidity']}%",
        f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {pop:.0f}%",
    ]
    return "\n".join(msg)

async def get_3day_forecast(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"""
    try:
        data = fetch_weather(city, is_forecast=True)

        if not data or not isinstance(data, dict) or 'list' not in data:
            return "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"

        daily_forecasts = {}
        for forecast in data['list']:
            date = datetime.fromtimestamp(forecast['dt']).strftime('%Y-%m-%d')
            if date not in daily_forecasts:
                daily_forecasts[date] = []
            daily_forecasts[date].append(forecast)

        message = ["<b>üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>"]
        day_names = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]

        for i, (date, forecasts) in enumerate(list(daily_forecasts.items())[:3]):
            # –î–Ω–µ–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞ –¥–µ–Ω—å)
            day_temp = round(max(f['main']['temp'] for f in forecasts))

            # –ù–æ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∞—Å—ã —Å 0 –¥–æ 6)
            night_forecasts = [
                f['main']['temp']
                for f in forecasts
                if datetime.fromtimestamp(f['dt']).hour < 6
            ]

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞ –¥–µ–Ω—å
            night_temp = round(min(night_forecasts)) if night_forecasts else round(min(f['main']['temp'] for f in forecasts))

            weather = forecasts[0]['weather'][0]
            icon, desc = get_weather_icon(weather['icon'])
            pop = round(max(f.get('pop', 0) * 100 for f in forecasts))

            message.append(
                f"\n\n{icon} <b>{day_names[i]} ({date})</b>"
                f"\n‚Ä¢ {desc}"
                f"\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –¥–Ω–µ–º {day_temp}¬∞C, –Ω–æ—á—å—é {night_temp}¬∞C"
                f"\n‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {pop}%"
                f"\n‚Ä¢ –í–µ—Ç–µ—Ä: {forecasts[0]['wind']['speed']} –º/—Å"
            )

        return "\n".join(message)

    except Exception as e:
        logging.error(f"Forecast error: {str(e)}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"

async def send_daily_notification(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        current = fetch_weather(DEFAULT_CITY)
        forecast = fetch_weather(DEFAULT_CITY, is_forecast=True)
        message = build_weather_message(current, forecast, DEFAULT_CITY)
        await context.bot.send_message(context.job.chat_id, text=message, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def get_weather_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    keyboard = [
        [InlineKeyboardButton(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å ({datetime.now().strftime('%H:%M')})",
                            callback_data="refresh")],
        [InlineKeyboardButton("üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    context.user_data["city"] = DEFAULT_CITY

    context.job_queue.run_daily(
        send_daily_notification,
        time=NOTIFICATION_TIME,
        days=(0, 1, 2, 3, 4, 5, 6),
        chat_id=chat_id,
        name=str(chat_id),
    )

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ {DEFAULT_CITY} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /weather <–≥–æ—Ä–æ–¥> –¥–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞.",
        reply_markup=get_weather_keyboard()
    )

async def weather(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather"""
    city = " ".join(context.args) if context.args else DEFAULT_CITY
    context.user_data["city"] = city

    try:
        current = fetch_weather(city)
        forecast = fetch_weather(city, is_forecast=True)
        message = build_weather_message(current, forecast, city)
    except Exception as e:
        message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

    await update.message.reply_text(
        text=message,
        parse_mode="HTML",
        reply_markup=get_weather_keyboard()
    )

async def handle_button_click(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    try:
        city = context.user_data.get('city', DEFAULT_CITY)

        if query.data == 'refresh':
            current = fetch_weather(city)
            forecast = fetch_weather(city, is_forecast=True)
            message = build_weather_message(current, forecast, city)
            keyboard = get_weather_keyboard()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        elif query.data == 'forecast':
            await query.answer("‚åõ –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑...")
            message = await get_3day_forecast(city)
            keyboard = get_weather_keyboard()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        await query.edit_message_text(
            text=message,
            parse_mode='HTML',
            reply_markup=keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    except Exception as e:
        logging.error(f"Button handler error: {str(e)}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JobQueue
    application.job_queue.scheduler.configure(timezone=pytz.timezone("Europe/Moscow"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CallbackQueryHandler(handle_button_click))

    application.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
