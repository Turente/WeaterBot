import logging
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, JobQueue
import requests
from cachetools import TTLCache
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "–≤–∞—à_api_–∫–ª—é—á_openweathermap"
TELEGRAM_TOKEN = "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"
DEFAULT_CITY = "–ú–æ—Å–∫–≤–∞"  # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CACHE_TIME = 1800  # 30 –º–∏–Ω—É—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
NOTIFICATION_TIME = time(hour=7, minute=0, tzinfo=pytz.timezone("Europe/Moscow"))  # 7:00 –ø–æ –ú–æ—Å–∫–≤–µ

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
weather_cache = TTLCache(maxsize=100, ttl=CACHE_TIME)

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º
WEATHER_ICONS = {
    "01": ("‚òÄÔ∏è", "–Ø—Å–Ω–æ"),
    "02": ("‚õÖ", "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"),
    "03": ("‚òÅÔ∏è", "–û–±–ª–∞—á–Ω–æ"),
    "04": ("‚òÅÔ∏è", "–ü–∞—Å–º—É—Ä–Ω–æ"),
    "09": ("üåßÔ∏è", "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"),
    "10": ("üå¶Ô∏è", "–î–æ–∂–¥—å"),
    "11": ("‚õàÔ∏è", "–ì—Ä–æ–∑–∞"),
    "13": ("‚ùÑÔ∏è", "–°–Ω–µ–≥"),
    "50": ("üå´Ô∏è", "–¢—É–º–∞–Ω")
}

def get_weather_icon(weather_code: str) -> tuple:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É –ø–æ–≥–æ–¥—ã."""
    code_prefix = weather_code[:2]
    return WEATHER_ICONS.get(code_prefix, ("üå§Ô∏è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))

def fetch_weather(city: str, is_forecast: bool = False) -> dict:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    cache_key = f"{city}_forecast" if is_forecast else f"{city}_current"
    if cache_key in weather_cache:
        return weather_cache[cache_key]

    url = (
        f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric&lang=ru"
        if is_forecast
        else f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    )
    response = requests.get(url)
    data = response.json()

    if data.get("cod") not in [200, "200"]:
        raise Exception(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")

    weather_cache[cache_key] = data
    return data

def build_weather_message(current: dict, forecast: dict, city: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
    current_weather = current["weather"][0]
    icon, description = get_weather_icon(current_weather["icon"])
    temp = current["main"]["temp"]
    feels_like = current["main"]["feels_like"]
    pop = forecast["list"][0].get("pop", 0) * 100  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ (0-100%)

    msg = [
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>",
        f"‚Ä¢ <i>{description}</i>",
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)",
        f"‚Ä¢ –í–µ—Ç–µ—Ä: {current['wind']['speed']} –º/—Å",
        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['main']['humidity']}%",
        f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {pop:.0f}%",
        "\n<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"
    ]

    today = datetime.now().strftime("%Y-%m-%d")
    today_forecast = [f for f in forecast["list"] if datetime.fromtimestamp(f["dt"]).strftime("%Y-%m-%d") == today]
    
    if today_forecast:
        day_temp = max(f["main"]["temp"] for f in today_forecast)
        night_temp = min(f["main"]["temp"] for f in today_forecast if datetime.fromtimestamp(f["dt"]).hour < 6)
        pop_day = max(f.get("pop", 0) * 100 for f in today_forecast)
        
        msg.append(
            f"\n‚Ä¢ –î–µ–Ω—å: <b>{day_temp}¬∞C</b>, –ù–æ—á—å: <b>{night_temp}¬∞C</b>"
            f"\n‚Ä¢ –î–æ–∂–¥—å: {pop_day:.0f}%"
        )

    return "\n".join(msg)

def send_daily_notification(context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤ 7:00."""
    job = context.job
    try:
        current = fetch_weather(DEFAULT_CITY)
        forecast = fetch_weather(DEFAULT_CITY, is_forecast=True)
        message = build_weather_message(current, forecast, DEFAULT_CITY)
        context.bot.send_message(job.context, text=message, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.effective_chat.id
    context.user_data["city"] = DEFAULT_CITY
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    context.job_queue.run_daily(
        send_daily_notification,
        time=NOTIFICATION_TIME,
        days=(0, 1, 2, 3, 4, 5, 6),
        context=chat_id,
        name=str(chat_id)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        [InlineKeyboardButton("üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ {DEFAULT_CITY} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /weather <–≥–æ—Ä–æ–¥> –¥–ª—è —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞.",
        reply_markup=reply_markup
    )

def weather(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather."""
    city = " ".join(context.args) if context.args else DEFAULT_CITY
    context.user_data["city"] = city
    
    try:
        current = fetch_weather(city)
        forecast = fetch_weather(city, is_forecast=True)
        message = build_weather_message(current, forecast, city)
    except Exception as e:
        message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        [InlineKeyboardButton("üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(text=message, parse_mode="HTML", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    query.answer()
    city = context.user_data.get("city", DEFAULT_CITY)

    if query.data == "refresh":
        try:
            current = fetch_weather(city)
            forecast = fetch_weather(city, is_forecast=True)
            message = build_weather_message(current, forecast, city)
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
        query.edit_message_text(text=message, parse_mode="HTML")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    job_queue = updater.job_queue

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("weather", weather))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()